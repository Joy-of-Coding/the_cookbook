[
  {
    "model": "recipes.recipe",
    "pk": 3,
    "fields": {
      "created_at": "2022-01-10T20:30:05.473Z",
      "updated_at": "2022-01-10T20:30:05.474Z",
      "title": "Making a landing page with Chakra UI",
      "summary": "I'll show you how to build a responsive landing page in React using the Chakra UI design system. This is the first part and we'll setup our landing page and build the hero section.",
      "img_link": "https://raptis.wtf/static/4551d451c26f241f4dbea0412969d296/6f008/chakra-landing.jpg"
    }
  },
  {
    "model": "recipes.recipe",
    "pk": 4,
    "fields": {
      "created_at": "2022-01-10T20:38:38.775Z",
      "updated_at": "2022-01-10T20:38:38.775Z",
      "title": "Deploying Django to production",
      "summary": "This recipe provides an overview of how you might go about finding a host to deploy your website, and what you need to do in order to get your site ready for production.",
      "img_link": "https://www.starwindsoftware.com/blog/wp-content/uploads/2019/09/word-image-21.png"
    }
  },
  {
    "model": "recipes.recipe",
    "pk": 5,
    "fields": {
      "created_at": "2022-01-10T20:46:00.820Z",
      "updated_at": "2022-01-10T20:46:00.820Z",
      "title": "A Complete Guide to Flexbox",
      "summary": "Our comprehensive guide to CSS flexbox layout. This complete guide explains everything about flexbox, focusing on all the different possible properties for the parent element (the flex container) and the child elements (the flex items). It also includes history, demos, patterns, and a browser support chart.",
      "img_link": "https://oracle-patches.com/images/2019/11/09/flexbox-css_large.jpg"
    }
  },
  {
    "model": "recipes.recipeconcept",
    "pk": 2,
    "fields": {
      "title": "Chakra UI",
      "learning_link": "https://chakra-ui.com/",
      "recipe": 3
    }
  },
  {
    "model": "recipes.recipeconcept",
    "pk": 3,
    "fields": {
      "title": "React",
      "learning_link": "https://beta.reactjs.org/",
      "recipe": 3
    }
  },
  {
    "model": "recipes.recipeconcept",
    "pk": 4,
    "fields": {
      "title": "CSS",
      "learning_link": "https://www.w3schools.com/Css/",
      "recipe": 3
    }
  },
  {
    "model": "recipes.recipeconcept",
    "pk": 5,
    "fields": {
      "title": "Django",
      "learning_link": "https://www.djangoproject.com/",
      "recipe": 4
    }
  },
  {
    "model": "recipes.recipeconcept",
    "pk": 6,
    "fields": {
      "title": "Hosting",
      "learning_link": "https://www.khanacademy.org/computing/computer-programming/html-css/web-development-tools/a/hosting-your-website-on-your-own-server",
      "recipe": 4
    }
  },
  {
    "model": "recipes.recipeconcept",
    "pk": 7,
    "fields": {
      "title": "CSS",
      "learning_link": "https://www.w3schools.com/Css/",
      "recipe": 5
    }
  },
  {
    "model": "recipes.recipeconcept",
    "pk": 8,
    "fields": {
      "title": "Basic Layout",
      "learning_link": "https://www.w3schools.com/Css/css_website_layout.asp",
      "recipe": 5
    }
  },
  {
    "model": "recipes.recipestep",
    "pk": 3,
    "fields": {
      "title": "Installation",
      "text_content": "Create a project using create-react-app, install chakra-ui and it's dependencies.",
      "recipe": 3
    }
  },
  {
    "model": "recipes.recipestep",
    "pk": 4,
    "fields": {
      "title": "Define the folder structure",
      "text_content": "There is a huge discussion on the ideal React folder structure. I believe there is no perfect folder structure, you just pick a clear structure that fits your goals and it's comprehensible.\r\n\r\nI apply the KISS principle (\"Keep It Simple, Stupid\") for the folder structure. It consists of three core directories pages, components, and utils.",
      "recipe": 3
    }
  },
  {
    "model": "recipes.recipestep",
    "pk": 5,
    "fields": {
      "title": "Create the layout",
      "text_content": "Now it's time to create the LandingLayout.js file and place it into the /components/layouts folder.\r\n\r\nThis component will always render the header, the footer and any components that are passed as children.",
      "recipe": 3
    }
  },
  {
    "model": "recipes.recipestep",
    "pk": 6,
    "fields": {
      "title": "The responsive Header component",
      "text_content": "The Header.js file will be in the /components/sections folder.\r\n\r\nThe starting point to this component was this code by Jean Bauer at the official Chakra UI docs.\r\n\r\nWe'll make some adjustments to make the component fully responsive and enhance its UI.",
      "recipe": 3
    }
  },
  {
    "model": "recipes.recipestep",
    "pk": 7,
    "fields": {
      "title": "Let's dive into the Hero section",
      "text_content": "The hero section is the most important part of any landing page. It's the first part, the user interacts with and it has to be perfect!\r\n\r\nAs you can see below, the section is composed of two core elements. The image and the main content (header, subtitle, CTA button).",
      "recipe": 3
    }
  },
  {
    "model": "recipes.recipestep",
    "pk": 9,
    "fields": {
      "title": "Overview",
      "text_content": "Once your site is finished (or finished \"enough\" to start public testing) you're going to need to host it somewhere more public and accessible than your personal development computer.",
      "recipe": 4
    }
  },
  {
    "model": "recipes.recipestep",
    "pk": 10,
    "fields": {
      "title": "What is a production environment?",
      "text_content": "The production environment is the environment provided by the server computer where you will run your website for external consumption.",
      "recipe": 4
    }
  },
  {
    "model": "recipes.recipestep",
    "pk": 11,
    "fields": {
      "title": "Choosing a hosting provider",
      "text_content": "There are well over 100 hosting providers that are known to either actively support or work well with Django (you can find a fairly exhaustive list at DjangoFriendly hosts). These vendors provide different types of environments (IaaS, PaaS), and different levels of computing and network resources at different prices.",
      "recipe": 4
    }
  },
  {
    "model": "recipes.recipestep",
    "pk": 12,
    "fields": {
      "title": "Getting your website ready to publish",
      "text_content": "The Django skeleton website created using the django-admin and manage.py tools are configured to make development easier. Many of the Django project settings (specified in settings.py) should be different for production, either for security or performance reasons.",
      "recipe": 4
    }
  },
  {
    "model": "recipes.recipestep",
    "pk": 13,
    "fields": {
      "title": "How does Heroku work?",
      "text_content": "Heroku runs Django websites within one or more \"Dynos\", which are isolated, virtualized Unix containers that provide the environment required to run an application. The dynos are completely isolated and have an ephemeral file system (a short-lived file system that is cleaned/emptied every time the dyno restarts). The only thing that dynos share by default are application configuration variables. Heroku internally uses a load balancer to distribute web traffic to all \"web\" dynos. Since nothing is shared between them, Heroku can scale an app horizontally by adding more dynos (though of course you may also need to scale your database to accept additional connections).",
      "recipe": 4
    }
  },
  {
    "model": "recipes.recipestep",
    "pk": 14,
    "fields": {
      "title": "Create and upload the website",
      "text_content": "To create the app we run the \"create\" command in the root directory of our repository. This creates a git remote (\"pointer to a remote repository\") named heroku in our local git environment.",
      "recipe": 4
    }
  },
  {
    "model": "recipes.recipestep",
    "pk": 15,
    "fields": {
      "title": "Summary",
      "text_content": "That's the end of this tutorial on setting up Django apps in production, and also the series of tutorials on working with Django. We hope you've found them useful. You can check out a fully worked-through version of the source code on Github here.\r\n\r\nThe next step is to read our last few articles, and then complete the assessment task.",
      "recipe": 4
    }
  },
  {
    "model": "recipes.recipestep",
    "pk": 16,
    "fields": {
      "title": "Background",
      "text_content": "The Flexbox Layout (Flexible Box) module (a W3C Candidate Recommendation as of October 2017) aims at providing a more efficient way to lay out, align and distribute space among items in a container, even when their size is unknown and/or dynamic (thus the word ôflexö).\r\n\r\nThe main idea behind the flex layout is to give the container the ability to alter its itemsÆ width/height (and order) to best fill the available space (mostly to accommodate to all kind of display devices and screen sizes). A flex container expands items to fill available free space or shrinks them to prevent overflow.",
      "recipe": 5
    }
  },
  {
    "model": "recipes.recipestep",
    "pk": 17,
    "fields": {
      "title": "Basics and terminology",
      "text_content": "Since flexbox is a whole module and not a single property, it involves a lot of things including its whole set of properties. Some of them are meant to be set on the container (parent element, known as ôflex containerö) whereas the others are meant to be set on the children (said ôflex itemsö).",
      "recipe": 5
    }
  },
  {
    "model": "recipes.recipestep",
    "pk": 18,
    "fields": {
      "title": "Prefixing Flexbox",
      "text_content": "Flexbox requires some vendor prefixing to support the most browsers possible. It doesnÆt just include prepending properties with the vendor prefix, but there are actually entirely different property and value names. This is because the Flexbox spec has changed over time, creating an ôoldö, ôtweenerö, and ônewö versions.",
      "recipe": 5
    }
  },
  {
    "model": "recipes.recipestep",
    "pk": 19,
    "fields": {
      "title": "Bugs",
      "text_content": "Flexbox is certainly not without its bugs. The best collection of them IÆve seen is Philip Walton and Greg WhitworthÆs Flexbugs. ItÆs an open-source place to track all of them, so I think itÆs best to just link to that.",
      "recipe": 5
    }
  },
  {
    "model": "recipes.recipedebuggingtip",
    "pk": 1,
    "fields": {
      "content": "Try not to mix together css styles and Chakra built-in styling tools. It will make it more difficult to debug errors in your UI.",
      "recipe": 3
    }
  },
  {
    "model": "recipes.recipedebuggingtip",
    "pk": 2,
    "fields": {
      "content": "Use version control to save yourself sanity when debugging issues in deployment. Get one thing working at a time, make a commit out of it, and move on to the next step. Doing too many things at once is a sure recipe for disaster.",
      "recipe": 4
    }
  },
  {
    "model": "recipes.recipedebuggingtip",
    "pk": 3,
    "fields": {
      "content": "The flex model can be difficult to pick up at first - don't worry, it's like that for everyone! If you're feeling discouraged - check out this link: https://www.reddit.com/r/webdev/comments/r86vhe/dan_abramov_react_software_engineer_and_cocreator/",
      "recipe": 5
    }
  }
]
